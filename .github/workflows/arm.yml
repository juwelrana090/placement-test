name: 'Publish Linux ARM Builds'

on:
  workflow_dispatch: # Manual trigger
  push:
    tags:
      - 'v*' # Trigger the workflow on version tags, e.g., v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest  # Using the latest Ubuntu environment

    strategy:
      matrix:
        arch: [aarch64, armv7l]  # ARM architectures to target
        include:
          - arch: aarch64
            deb: arm64
            rpm: aarch64
            appimage: aarch64
          - arch: armv7l
            deb: armhf
            rpm: arm
            appimage: armhf

    steps:
      - uses: actions/checkout@v4  # Checkout the code

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl libssl-dev \
            libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev \
            librsvg2-dev patchelf libfuse2 file jq gh

      - name: Set up Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add aarch64-unknown-linux-gnu armv7-unknown-linux-gnueabihf

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Node.js and Dependencies
        run: |
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install

      - name: Build app for ARM
        run: |
          npm run tauri build -- --target ${{ matrix.arch }} --release

      - name: Get App Version
        run: echo "APP_VERSION=$(jq -r .package.version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        run: |
          TAG_NAME=${{ github.ref_name }}
          RELEASE_NAME="Release $TAG_NAME"
          BODY="Automated release from GitHub Actions."

          gh release create $TAG_NAME \
            -R ${{ github.repository }} \
            --title "$RELEASE_NAME" \
            --notes "$BODY" \
            src-tauri/target/release/bundle/deb/myapp_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb \
            src-tauri/target/release/bundle/rpm/myapp-${{ env.APP_VERSION }}-1.${{ matrix.rpm }}.rpm \
            src-tauri/target/release/bundle/appimage/myapp_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage || echo "Release already exists."

      - name: Upload Deb Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Debian Bundle
          path: src-tauri/target/release/bundle/deb/myapp_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb

      - name: Upload RPM Bundle
        uses: actions/upload-artifact@v4
        with:
          name: RPM Bundle
          path: src-tauri/target/release/bundle/rpm/myapp-${{ env.APP_VERSION }}-1.${{ matrix.rpm }}.rpm

      - name: Upload AppImage Bundle
        uses: actions/upload-artifact@v4
        with:
          name: AppImage Bundle
          path: src-tauri/target/release/bundle/appimage/myapp_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage
